{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<h2>IPM-407: Modelación Computacional con Algoritmos Rápidos</h2>\n",
    "<h3>Proyecto 3 - Transformada Rápida de Gauss</h3>\n",
    "<h4>Daniel San Martín</h4>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tabla de Contenidos\n",
    "* [1. Introducción](#introduccion)\n",
    "* [2. Desarrollo](#desarrollo)\n",
    "* [3. Conclusiones](#conclusiones)\n",
    "* [4. Referencias](#referencias)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id=\"introduccion\" />\n",
    "## 1. Introducción\n",
    "\n",
    "### 1.1 La transformada de Gauss\n",
    "\n",
    "Muchos problemas de matemáticas aplicada utilizan la *Transformada de Gauss*\n",
    "\n",
    "\\begin{equation}\n",
    "    G_{\\delta}f(x) = \\int_{\\Gamma}e^{-|x-y|^2/\\delta}f(y)dy \\quad (\\delta > 0)\n",
    "\\end{equation}\n",
    "\n",
    "de una función $f$ definida en $\\Gamma \\subset \\mathbb{R}^d$. El ejemplo más simple es la ecuación de calor. La solución del problema de valor inicial\n",
    "\n",
    "\\begin{equation}\n",
    "\\begin{split}\n",
    "    u_t(x,t) &= \\Delta u(x,t) \\quad \\text{para} ~ t > 0 \\\\\n",
    "    u(x,0) &= f(x) \\quad \\text{para} ~ x \\in \\mathbb{R}^d\n",
    "\\end{split}\n",
    "\\end{equation}\n",
    "\n",
    "esta dado por\n",
    "\n",
    "\\begin{equation}\n",
    "    u(x,t) = (4\\pi t)^{-d/2} G_{4t}f(x),\n",
    "\\end{equation}\n",
    "\n",
    "con $\\Gamma$ igual a todo el espacio.\n",
    "\n",
    "<!--Para este proyecto el objetivo es utilizar métodos basados en las transformadas de Fourier para resolver ecuaciones diferenciales parciales, específicamente las del tipo elípticas. Dada las condiciones de borde de este problema en particular, es más favorable utilizar la transformada del seno.\n",
    "\n",
    "### 1.1 La transformada de Fourier \n",
    "\n",
    "La transformada de Fourier, denominada así por Joseph Fourier, es una transformación matemática empleada para transformar señales entre el dominio del tiempo (o espacial) y el dominio de la frecuencia, que tiene muchas aplicaciones en la física y la ingeniería. Está definida de muchas formas, pero la utilizada en [1] junto a su inversa son:\n",
    "\n",
    "\\begin{equation}\n",
    "    \\hat{f}(\\omega) = \\int_{-\\infty}^{\\infty}f(x)e^{-i2\\pi\\omega x}d\\omega, \\qquad\n",
    "    f(x) = \\int_{-\\infty}^{\\infty}\\hat{f}(\\omega)e^{i2\\pi\\omega x}d\\omega, \\quad \\text{con} ~ x, \\omega \\in \\mathbb{R}\n",
    "\\end{equation}\n",
    "\n",
    "Su uso para resolución de problemas computacionales está más relacionada con la transformada discreta de Fourier (y su inversa respectivamente):\n",
    "\n",
    "\\begin{equation}\n",
    "    F_k = \\sum_{n=0}^{N-1}f_n e^{\\frac{-i2\\pi nk}{N}}, \\qquad\n",
    "    f_n = \\sum_{k=0}^{N-1}F_k e^{\\frac{i2\\pi nk}{N}}\n",
    "\\end{equation}\n",
    "\n",
    "Su extensión para 2 dimensiones y su respectiva inversa están representadas por\n",
    "\n",
    "\\begin{equation}\n",
    "    F_{jk} = \\sum_{m=0}^{M-1}\\sum_{n=0}^{N-1}f_{mn} e^{-i2\\pi\\left(\\frac{mk}{M} + \\frac{nk}{N}\\right)},\\qquad\n",
    "    f_{mn} = \\sum_{j=0}^{M-1}\\sum_{k=0}^{N-1}F_{jk} e^{i2\\pi\\left(\\frac{mk}{M} + \\frac{nk}{N}\\right)}\n",
    "\\end{equation}\n",
    "\n",
    "\n",
    "### 1.2 La transformada Discreta del Seno (DST)\n",
    "\n",
    "Es posible obtener la (DST) manejando la expresión de Fourier y junto a su inversa está definida por \n",
    "\n",
    "\\begin{equation}\n",
    "    F_k = \\sum_{n=1}^{N-1}f_{mn}\\sin\\left(\\frac{\\pi kn}{N}\\right), \\qquad\n",
    "    f_n = 2\\sum_{k=1}^{N-1}f_n\\sin\\left(\\frac{\\pi kn}{N}\\right),\n",
    "\\end{equation}\n",
    "\n",
    "además, su extensión a dos dimensiones está expresada por\n",
    "\n",
    "\\begin{equation}\n",
    "    F_{jk} = -\\frac{1}{MN}\\sum_{m=1}^{M-1}\\sum_{n=1}^{N-1}f_{mn}\\sin\\left(\\frac{\\pi jm}{M}\\right)\\sin\\left(\\frac{\\pi kn}{N}\\right), \\qquad\n",
    "    f_{mn} = \\sum_{m=1}^{M-1}\\sum_{n=1}^{N-1}F_{jk}\\sin\\left(\\frac{\\pi jm}{M}\\right)\\sin\\left(\\frac{\\pi kn}{N}\\right),\n",
    "\\end{equation}\n",
    "-->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "from matplotlib import cm\n",
    "from numba import jit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def chebyshevDx(N):\n",
    "    if N == 0:\n",
    "        D = 0\n",
    "        x = 1\n",
    "        return D, x\n",
    "    x = np.cos(np.pi*np.arange(N+1)/N)\n",
    "    c = np.hstack((2,np.ones(N-1),2))*((-1.)**np.arange(N+1))\n",
    "    X = np.tile(x,(N+1,1)).T\n",
    "    dX = X - X.T\n",
    "    D = np.outer(c,1./c)/(dX+np.eye(N+1))\n",
    "    D = D - np.diag(np.sum(D.T,axis=0))\n",
    "    return D, x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def clencurtQuad(N):\n",
    "    theta = np.pi*np.arange(0,N+1)/N; x = np.cos(theta)\n",
    "    w = np.zeros(N+1); ii = np.arange(1, N); v = np.ones(N-1)\n",
    "    if N%2 == 0: \n",
    "        w[0] = 1/(N**2-1); w[N] = w[0]\n",
    "        for k in range(1, int(N/2)):\n",
    "            v = v - 2*np.cos(2*k*theta[ii])/(4*k**2-1)\n",
    "        v = v - np.cos(N*theta[ii])/(N**2-1)\n",
    "    else:\n",
    "        w[0] = 1/N**2; w[N] = w[0]\n",
    "        for k in range(1, int((N+1)/2)):\n",
    "            v = v - 2*np.cos(2*k*theta[ii])/(4*k**2-1)\n",
    "    w[ii] = 2*v/N\n",
    "    return x, w"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def gaussianQuad(N):\n",
    "    if N == 1:\n",
    "        return np.array([1]), np.array([2])\n",
    "    \n",
    "    beta = .5 / np.sqrt( 1. - (2.*np.arange(1.,N))**(-2) )\n",
    "    T = np.diag(beta,1) + np.diag(beta,-1)\n",
    "    D, V = np.linalg.eigh(T)\n",
    "    x = D\n",
    "    w = 2*V[0,:]**2\n",
    "    return x, w"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "@jit(nopython=True)\n",
    "def L2_norm(x):\n",
    "    s = 0\n",
    "    for i in range(len(x)):\n",
    "        s += x[i]**2\n",
    "    return np.sqrt(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "@jit(nopython=True)\n",
    "def GL(x, s, d):\n",
    "    M, N = len(x), len(s)\n",
    "    G = np.zeros((M, N))\n",
    "    for i in range(M):\n",
    "        for j in range(N):\n",
    "            G[i, j] = np.exp(-L2_norm(np.array([x[i]-s[j]]))**2/d)\n",
    "    return G"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def G(x, s, d):\n",
    "    X, S = np.meshgrid(x, s)\n",
    "    G = np.exp(-np.abs(X-S)**2/d)\n",
    "    return G"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def q(s):\n",
    "    N = len(s)\n",
    "    #_, w = gaussian_nodes_and_weights(N)\n",
    "    _, w = clencurtQuad(N-1)\n",
    "    return w*f(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def discreteGaussL(x, s, d):\n",
    "    return np.dot(GL(x, s, d), q(s))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def discreteGauss(x, s, d):\n",
    "    return np.dot(q(s), G(x, s, d))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def f(x):\n",
    "    return 0.3*x + 0.7*np.sin(-1.5*np.pi*x)\n",
    "    #return x**4 + x**3 + x**2 + x\n",
    "    #return -x**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "M = 50\n",
    "N = 20\n",
    "x = np.linspace(-1, 1, M)\n",
    "s = np.linspace(-1, 1, N)\n",
    "d = .01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "gg = discreteGauss(x, s, d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#%timeit gg = discreteGaussL(x, s, d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7b980f2b38>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x, (d*np.pi)**(-1/2)*gg)\n",
    "plt.plot(x, f(x))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 586,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "300\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nSUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f1e055d9c88>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f1e05c7bda0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "N = 20\n",
    "D, x = chebyshevDx(N)\n",
    "D2 = np.dot(D, D)\n",
    "#D2[0] = np.zeros(N+1)\n",
    "#D2[-1] = np.zeros(N+1)\n",
    "#print(D2)\n",
    "f = lambda x: -x**2 #np.sin(x)\n",
    "TMAX = .3\n",
    "dt = .001\n",
    "T = int(TMAX/dt)\n",
    "print(T)\n",
    "t = np.zeros(T)\n",
    "U = np.zeros((T, N+1))\n",
    "v = f(x)\n",
    "U[0] = v\n",
    "tt = 0\n",
    "#plt.plot(x, f(x))\n",
    "#plt.show()\n",
    "for i in range(1, T):\n",
    "    for j in range(5):\n",
    "        tt += dt\n",
    "        v = v + dt*np.dot(D2, v)\n",
    "    t[i] = tt#t[i-1] + dt \n",
    "    U[i] = v#U[i-1] + dt*np.dot(D2, U[i-1])\n",
    "    if i%5 == 0:\n",
    "        plt.plot(x, U[i])\n",
    "\n",
    "plt.show()\n",
    "plt.imshow(U, cmap=cm.jet, extent=[-1, 1,0, TMAX])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <div id=\"desarrollo\" />\n",
    "## 2. Desarrollo\n",
    "\n",
    "<!--\n",
    "Consideren la siguiente ecuación de Poisson\n",
    "\n",
    "\\begin{equation}\n",
    "    \\frac{\\partial^2\\phi}{\\partial x^2} + \\frac{\\partial^2\\phi}{\\partial y^2} = \\frac{1}{\\pi^2}\n",
    "    \\left[30\\left(\\left(\\frac{x}{\\pi}\\right)^2-\\frac{x}{\\pi}\\right) \n",
    "    + 30\\left(\\left(\\frac{y}{\\pi}\\right)^2-\\frac{y}{\\pi}\\right) - 4\\pi^2\\left(\\frac{x}{\\pi}-1 \\right)\\sin(2y) \\right]\n",
    "\\end{equation}\n",
    "\n",
    "en el cuadrado $0\\leq x \\leq \\pi$ y $0 \\leq y \\leq \\pi$ y con condiciones de contorno $\\phi(0,y)=\\phi(\\pi,y)=\\phi(x,0)=\\phi(x,\\pi)=0$. Resuelvan numéricamente esta ecuación usando\n",
    "\n",
    "1. Método espectral\n",
    "2. Diferencias finitas aceleradas con FFT en 2D (tipo pregunta 4 de la tarea 2)\n",
    "3. Diferencias finitas aceleradas con FFT en 1D (tipo pregunta 5 de la tarea)\n",
    "\n",
    "Para mallas de $N = 16, 32, 64$ y $128$ nodos (o más!) En su informe, detalle la implementación de cada técnica y discuta los siguientes puntos:\n",
    "\n",
    "1. Convergencia del error.\n",
    "2. Complejidad algoritmica ($N$ versus tiempo).\n",
    "3. Memoria utilizada.\n",
    "4. Conclusiones con respecto a la conveniencia de cada caso.\n",
    "\n",
    "La solución analítica de esta ecuación es \n",
    "\\begin{equation}\n",
    "    \\phi(x,y) = 15\\left(\\left(\\frac{x}{\\pi}\\right)^2-\\frac{x}{\\pi}\\right)\n",
    "    \\left(\\left(\\frac{y}{\\pi}\\right)^2-\\frac{y}{\\pi}\\right)-\\sin(2y)\\frac{\\sinh(2\\pi(\\frac{x}{\\pi}-1))}{\\sinh(2\\pi)}\n",
    "    + \\left(\\frac{x}{\\pi}-1 \\right)\\sin(2y)\n",
    "\\end{equation}\n",
    "\n",
    "### Ayuda\n",
    "\n",
    "1. Esta tarea está inspirada en el Ejemplo 6.4 del libro *Fundamentals of Engineering Numerical Analysis* de Parviz Moin.\n",
    "2. Las condiciones de borde homogénea $\\phi = 0$ en los bordes son concordantes con la función seno, por lo tanto es más conveniente usar la transformada del seno. Hay una implementación de la transformada del seno en **scipy.fftpack**. Otra opción es calcular la transformada discreta del seno con FFTs de la forma:\n",
    "\n",
    "```python\n",
    "def dst_2D(x):\n",
    "    M, N = numpy.shape(x)\n",
    "    x = x[1:M−1,:]\n",
    "    M,N = numpy.shape(x)\n",
    "    y = numpy.zeros((2∗(M+1),N))\n",
    "    y[0,:] = numpy.zeros(N)[:]\n",
    "    y[1:M+1,:] = x[:,:]\n",
    "    y[M+1,:] = numpy.zeros(N)[:]\n",
    "    y[M+2:2∗M+ 2,:] = −numpy.flipud(x)[:,:]\n",
    "    y_t = fft(numpy.transpose(y))\n",
    "    y_t = numpy.transpose(y_t)\n",
    "    y = numpy.real((y_t[1:M+1])/(−1j∗(M+1)))\n",
    "    yy = numpy.zeros((M+2,N))\n",
    "    yy[1:M+1,:] = y[:,:]\n",
    "    return yy\n",
    "```\n",
    "\n",
    "```python\n",
    "def dst_1D(x):\n",
    "    M = len(x)\n",
    "    x = x[1:M−1]\n",
    "    M = len(x)\n",
    "    y = array([0])\n",
    "    y = numpy.append(y,x)\n",
    "    y = numpy.append(y,0)\n",
    "    y = numpy.append(y, −numpy.flipud(x))\n",
    "    y_t = numpy.fft.fft(y)\n",
    "    \n",
    "    y = numpy.real(y_t[1:M+1]/(−1j ∗(M+1)))\n",
    "    yy = numpy.array([0])\n",
    "    yy = numpy.append(yy, y)\n",
    "    yy = numpy.append(yy, 0)\n",
    "    return yy\n",
    "```\n",
    "Considerando que la transformada inversa del seno es igual a la transformada del seno multiplicado por $N/2$\n",
    "-->"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementación de funciones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import scipy.fftpack as spfft\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.sparse as scsp\n",
    "import scipy.sparse.linalg as spla\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "from matplotlib import cm\n",
    "from dcst import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def plot(x, y, u, plot_title=\"Test\", plot_type=\"\"):\n",
    "    \"\"\"\n",
    "    Grafica la solucion del problema.\n",
    "    \n",
    "    Parametros\n",
    "    -----------\n",
    "    x: numpy.array\n",
    "       Arreglo para el eje X\n",
    "    y: numpy.array\n",
    "       Arreglo para el eje Y\n",
    "    u: numpy.array\n",
    "       Matriz de soluciones - u(x,y)\n",
    "    plot_title: string\n",
    "        Nombre del grafico\n",
    "    plot_type: string\n",
    "        3D o de contorno\n",
    "    \n",
    "    Retorna\n",
    "    ----------\n",
    "    None, Grafico de la solucion\n",
    "    \n",
    "    \"\"\"\n",
    "    if plot_type == \"3D\":\n",
    "        fig = plt.figure(figsize=(12,8))\n",
    "        ax = fig.gca(projection='3d')\n",
    "        X, Y = np.meshgrid(x,y)\n",
    "        surf = ax.plot_surface(X, Y, u, rstride=1, cstride=1, \n",
    "                               cmap=cm.coolwarm, linewidth=0, antialiased=False)\n",
    "        ax.set_xlabel('$x$')\n",
    "        ax.set_ylabel('$y$')\n",
    "        ax.set_zlabel('$u(x,y)$')\n",
    "        ax.set_title(plot_title, fontsize=20)\n",
    "    else:    \n",
    "        plt.imshow(u, origin=\"lower\", cmap=cm.jet, extent=[0,np.pi,0,np.pi])\n",
    "        plt.title(plot_title, fontsize=20)\n",
    "        plt.colorbar()\n",
    "        \n",
    "    plt.show()\n",
    "    \n",
    "    return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def L2_error(w, u):\n",
    "    return np.sqrt(np.sum((w-u)**2)/np.sum(u**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def fa(x, y):\n",
    "    X, Y = np.meshgrid(x, y)\n",
    "    return 15 * ((X/np.pi)**2 - X/np.pi) * ((Y/np.pi)**2 - Y/np.pi) \\\n",
    "        - np.sin(2*Y) * (np.sinh(2*np.pi*(X/np.pi - 1)))/np.sinh(2*np.pi) + (X/np.pi - 1) * np.sin(2*Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def f_rhs(x, y):\n",
    "    X, Y = np.meshgrid(x, y)\n",
    "    return 1/(np.pi**2) * (30 * ((X/np.pi)**2 - X/np.pi) + 30 * ((Y/np.pi)**2 - Y/np.pi) \\\n",
    "        - 4*np.pi**2* (X/np.pi - 1) * np.sin(2*Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def convergence_plot(N, error_sp, error_d2, error_df):\n",
    "    # Plot\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.loglog(N, error_sp, 'b-*', label=\"Espectral\")\n",
    "    plt.loglog(N, error_d2, 'r-o', label=\"DF FFT 2D\")\n",
    "    plt.loglog(N, error_df, 'g-x', label=\"DF FFT\")\n",
    "    plt.title(\"Convergencia del error\")\n",
    "    plt.xlabel(\"N\")\n",
    "    plt.ylabel(\"Error\")\n",
    "    plt.grid(True)\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "    \n",
    "    return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def complexity_plot(N, time_sp, time_d2, time_df):\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.loglog(N, time_sp, 'b-*', label=\"Espectral\")\n",
    "    plt.loglog(N, time_d2, 'r-o', label=\"DF FFT 2D\")\n",
    "    plt.loglog(N, time_df, 'g-x', label=\"DF FFT\")\n",
    "    plt.title(\"Complejidad\")\n",
    "    plt.xlabel(\"N\")\n",
    "    plt.ylabel(\"Tiempo\")\n",
    "    plt.grid(True)\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "    \n",
    "    return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "n = 256\n",
    "M, N = n, n\n",
    "x = np.linspace(0, np.pi, M)\n",
    "y = np.linspace(0, np.pi, N)\n",
    "u = fa(x, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id=\"conclusiones\" />\n",
    "## 3. Conclusiones\n",
    "\n",
    "<!--\n",
    "Del desarrollo del proyecto se obtuvieron las siguientes conclusiones:\n",
    "\n",
    "* Es posible ver que el uso de métodos relacionados con la FFT (DST), tienen resultados cualitativamente buenos para la resolución de EDP's.\n",
    "* La complejidad de los algoritmos indican que computacionalmente son métodos eficientes para este tipo de problemas.\n",
    "* Según el análisis de los gráficos no existe una diferencia significativa en los resultados de cada algoritmo, pero aún así dependerá de los recursos de cómputo disponibles.\n",
    "* Gracias a la optimización de las librerías para el cálculo de las FFT (DST), es posible obtener resultados en una cantidad de tiempo bastante inferior que aplicando los métodos usuales.\n",
    "-->"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id=\"referencias\" />\n",
    "## 4. Referencias \n",
    "\n",
    "* [1] Greengard, L., & Strain, J. (1991). The fast Gauss transform. SIAM Journal on Scientific and Statistical Computing, 12(1), 79-94.\t\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
